#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç Diagnostic de l\'application EBF Bouak√©\n');

// 1. V√©rifier les fichiers d'environnement
console.log('1. üìã V√©rification des fichiers d\'environnement:');
const envFiles = ['.env', '.env.local', '.env.production'];
envFiles.forEach(file => {
  const envPath = path.join(__dirname, file);
  if (fs.existsSync(envPath)) {
    console.log(`   ‚úÖ ${file} trouv√©`);
    const content = fs.readFileSync(envPath, 'utf8');
    console.log(`   üìù Contenu:`);
    content.split('\n').forEach(line => {
      if (line.trim() && !line.includes('PASSWORD') && !line.includes('KEY')) {
        console.log(`      ${line}`);
      } else if (line.includes('PASSWORD') || line.includes('KEY')) {
        console.log(`      ${line.split('=')[0]}=***`);
      }
    });
  } else {
    console.log(`   ‚ùå ${file} non trouv√©`);
  }
});

// 2. V√©rifier la configuration Supabase
console.log('\n2. ‚òÅÔ∏è V√©rification de la configuration Supabase:');
require('dotenv').config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (supabaseUrl) {
  console.log(`   ‚úÖ NEXT_PUBLIC_SUPABASE_URL: ${supabaseUrl}`);
} else {
  console.log(`   ‚ùå NEXT_PUBLIC_SUPABASE_URL non configur√©`);
}

if (supabaseKey) {
  console.log(`   ‚úÖ SUPABASE_SERVICE_ROLE_KEY: *** configur√©`);
} else {
  console.log(`   ‚ùå SUPABASE_SERVICE_ROLE_KEY non configur√©`);
}

// 3. V√©rifier la configuration de la base de donn√©es
console.log('\n3. üóÑÔ∏è V√©rification de la base de donn√©es:');
const databaseUrl = process.env.DATABASE_URL;
if (databaseUrl) {
  console.log(`   ‚úÖ DATABASE_URL: ${databaseUrl}`);
  
  // V√©rifier si le fichier de base de donn√©es existe
  if (databaseUrl.startsWith('file:')) {
    const dbPath = databaseUrl.replace('file:', '');
    if (fs.existsSync(dbPath)) {
      console.log(`   ‚úÖ Fichier de base de donn√©es trouv√©: ${dbPath}`);
      const stats = fs.statSync(dbPath);
      console.log(`   üìä Taille: ${(stats.size / 1024).toFixed(2)} KB`);
    } else {
      console.log(`   ‚ùå Fichier de base de donn√©es non trouv√©: ${dbPath}`);
    }
  }
} else {
  console.log(`   ‚ùå DATABASE_URL non configur√©`);
}

// 4. V√©rifier les d√©pendances
console.log('\n4. üì¶ V√©rification des d√©pendances:');
const packageJsonPath = path.join(__dirname, 'package.json');
if (fs.existsSync(packageJsonPath)) {
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  const dependencies = packageJson.dependencies || {};
  
  console.log(`   ‚úÖ @supabase/supabase-js: ${dependencies['@supabase/supabase-js'] || 'non install√©'}`);
  console.log(`   ‚úÖ @prisma/client: ${dependencies['@prisma/client'] || 'non install√©'}`);
  console.log(`   ‚úÖ z-ai-web-dev-sdk: ${dependencies['z-ai-web-dev-sdk'] || 'non install√©'}`);
} else {
  console.log(`   ‚ùå package.json non trouv√©`);
}

// 5. V√©rifier les fichiers importants
console.log('\n5. üìÅ V√©rification des fichiers importants:');
const importantFiles = [
  'src/lib/database.ts',
  'src/lib/storage.ts',
  'src/app/api/requests/route.ts',
  'src/app/signaler/page.tsx',
  'prisma/schema.prisma'
];

importantFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    console.log(`   ‚úÖ ${file}`);
  } else {
    console.log(`   ‚ùå ${file} non trouv√©`);
  }
});

// 6. Conseils
console.log('\n6. üí° Conseils:');
if (!supabaseUrl || !supabaseKey) {
  console.log('   ‚ö†Ô∏è  Les variables Supabase ne sont pas configur√©es.');
  console.log('   üìù Ajoutez ces lignes √† votre fichier .env:');
  console.log('      NEXT_PUBLIC_SUPABASE_URL=https://ekohrrzklzrjwjgistnk.supabase.co');
  console.log('      SUPABASE_SERVICE_ROLE_KEY=votre_cl√©_service_role');
}

if (!databaseUrl) {
  console.log('   ‚ö†Ô∏è  La base de donn√©es n\'est pas configur√©e.');
  console.log('   üìù Ajoutez cette ligne √† votre fichier .env:');
  console.log('      DATABASE_URL=file:./db/custom.db');
}

console.log('\nüéØ Prochaines √©tapes:');
console.log('   1. Corrigez les variables d\'environnement manquantes');
console.log('   2. Ex√©cutez `npm run db:push` pour cr√©er la base de donn√©es');
console.log('   3. Red√©marrez le serveur avec `npm run dev`');
console.log('   4. Testez √† nouveau le formulaire de demande');

console.log('\n‚úÖ Diagnostic termin√©');